==29879== Memcheck, a memory error detector
==29879== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==29879== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==29879== Command: ./server_test 6666 track.txt
==29879== 
==29879== 
==29879== HEAP SUMMARY:
==29879==     in use at exit: 1,712 bytes in 8 blocks
==29879==   total heap usage: 80,189 allocs, 80,181 frees, 5,913,010 bytes allocated
==29879== 
==29879== 64 bytes in 2 blocks are definitely lost in loss record 2 of 6
==29879==    at 0x4C3017F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==29879==    by 0x110BA1: Track::Track(b2World*, char*) (Track.cpp:72)
==29879==    by 0x144568: Environment::Environment(char*) (Environment.cpp:6)
==29879==    by 0x135DBB: Race::Race(char*) (Race.cpp:10)
==29879==    by 0x12B662: Server::create_race(ClientProxy&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (Server.cpp:58)
==29879==    by 0x12B23E: Server::run() (Server.cpp:17)
==29879==    by 0x17EBD9: void std::__invoke_impl<void, void (Thread::*)(), Thread*>(std::__invoke_memfun_deref, void (Thread::*&&)(), Thread*&&) (invoke.h:73)
==29879==    by 0x17E897: std::__invoke_result<void (Thread::*)(), Thread*>::type std::__invoke<void (Thread::*)(), Thread*>(void (Thread::*&&)(), Thread*&&) (invoke.h:95)
==29879==    by 0x17F11A: decltype (__invoke((_S_declval<0ul>)(), (_S_declval<1ul>)())) std::thread::_Invoker<std::tuple<void (Thread::*)(), Thread*> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (thread:234)
==29879==    by 0x17F0BB: std::thread::_Invoker<std::tuple<void (Thread::*)(), Thread*> >::operator()() (thread:243)
==29879==    by 0x17F08B: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (Thread::*)(), Thread*> > >::_M_run() (thread:186)
==29879==    by 0x50FD66E: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==29879== 
==29879== 64 bytes in 2 blocks are definitely lost in loss record 3 of 6
==29879==    at 0x4C3017F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==29879==    by 0x110F3E: Track::get_elements_state[abi:cxx11]() (Track.cpp:92)
==29879==    by 0x14479F: Environment::get_elements(State&) (Environment.cpp:29)
==29879==    by 0x135EA4: Race::run() (Race.cpp:20)
==29879==    by 0x17EBD9: void std::__invoke_impl<void, void (Thread::*)(), Thread*>(std::__invoke_memfun_deref, void (Thread::*&&)(), Thread*&&) (invoke.h:73)
==29879==    by 0x17E897: std::__invoke_result<void (Thread::*)(), Thread*>::type std::__invoke<void (Thread::*)(), Thread*>(void (Thread::*&&)(), Thread*&&) (invoke.h:95)
==29879==    by 0x17F11A: decltype (__invoke((_S_declval<0ul>)(), (_S_declval<1ul>)())) std::thread::_Invoker<std::tuple<void (Thread::*)(), Thread*> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (thread:234)
==29879==    by 0x17F0BB: std::thread::_Invoker<std::tuple<void (Thread::*)(), Thread*> >::operator()() (thread:243)
==29879==    by 0x17F08B: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (Thread::*)(), Thread*> > >::_M_run() (thread:186)
==29879==    by 0x50FD66E: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==29879==    by 0x59866DA: start_thread (pthread_create.c:463)
==29879==    by 0x5CBF88E: clone (clone.S:95)
==29879== 
==29879== LEAK SUMMARY:
==29879==    definitely lost: 128 bytes in 4 blocks
==29879==    indirectly lost: 0 bytes in 0 blocks
==29879==      possibly lost: 0 bytes in 0 blocks
==29879==    still reachable: 1,584 bytes in 4 blocks
==29879==         suppressed: 0 bytes in 0 blocks
==29879== Reachable blocks (those to which a pointer was found) are not shown.
==29879== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==29879== 
==29879== For counts of detected and suppressed errors, rerun with: -v
==29879== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
